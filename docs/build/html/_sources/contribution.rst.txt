Contribution
============

Guidance on how to set up a development environment and how to make a contribution to openpyweb. openpyweb is a free open-source project and it is managed by non-profit organization, all contributors are welcome.

You do not need to be programmer to contribute to openpyweb. You can contribute to test, write codes, learn, resolve issues, deploy, create community, advocate, correct documentations, train and donate to promote the openpyweb framework.

Thank you for considering contributing to openpyweb!


Support questions
----------------------

Please, don't use the issue tracker for this. Use one of the following
resources for questions about your own code:

* The ``#get-help`` channel on our Discord chat: https://discordapp.com/invite/36kGE5

*The IRC channel ``#openpyweb`` on FreeNode is linked to Discord, but Discord is preferred.

* Join Community : https://gitter.im/openpyweb-mvc/community

* The mailing list ``dev@openpyweb.com`` for long term discussion or larger issues.

* Check out openpyweb on ``Stack Overflow`` by searching it out using Google via:
	``site:stackoverflow.com openpyweb {search term, exception message, etc.} ``



Reporting issues
------------------

- Describe what you expected to happen.
- If possible, include a `minimal reproducible example`_ to help us
	identify the issue. This also helps us to check that the issue is not with
	your own code.
- Describe what actually happened. Include the full traceback if there was an
	exception.
- List your Python, openpyweb, and versions. If possible, check if this
	issue is already fixed in the repository.

.. _minimal reproducible example: https://stackoverflow.com/help/minimal-reproducible-example



Submitting patches
------------------------

- Use ``Black``  to autoformat your code. This should be done for you as a
git ``pre-commit`` hook, which gets installed when you run ``pip install -e .[dev]``.
	You may also wish to use Black's ``Editor integration``.

- Include tests if your patch is supposed to solve a bug, and explain clearly under which circumstances the bug happens. Make sure the test fails without your patch.

- Include a string like "Fixes #123" in your commit message(where 123 is the issue you fixed).
See `Closing issues using keywords <https://help.github.com/articles/creating-a-pull-request/>`.



First time setup
------------------

- Download and install the ``latest version of git`_.
- Configure git with your ``username`` and ``email`` ::

```
git config --global user.name 'your name'
git config --global user.email 'your email'
```
- Make sure you have a ``GitHub account``.
- Fork openpyweb to your GitHub account by clicking the `Fork`_ button.

**Clone** your GitHub fork locally

.. code-block:: python

git clone https://github.com/{username}/openpyweb
cd openpyweb 

- Add the main repository as a remote to update it later

.. code-block:: python

git remote add pallets https://github.com/openpyweb/openpyweb
git fetch openpyweb

- Create a virtualenv

.. code-block:: python

python3 -m venv env
env/bin/activate

if using  **Windows**

.. code-block:: python

env\Scripts\activate




- Install openpyweb in editable mode with development dependencies

.. code-block:: python
pip install -e ".[dev]" 

- Install the ``pre-commit framework ``.

- Install the pre-commit hooks

.. code-block:: python

pre-commit install --install-hooks


New to Github
---------------

**GitHub account:** https://github.com/join

*latest version of git:** https://git-scm.com/downloads

**username:** https://help.github.com/en/articles/setting-your-username-in-git

**email:** https://help.github.com/en/articles/setting-your-commit-email-address-in-git

**Fork:** https://github.com/pallets/openpyweb/fork

**Clone:** https://help.github.com/en/articles/fork-a-repo#step-2-create-a-local-clone-of-your-fork

**pre-commit framework:** https://pre-commit.com/#install


Start coding
----------------

- Create a branch to identify the issue you would like to work on. If you're submitting a bug or documentation fix, branch off of the latest ".x" branch

.. code-block:: python

git checkout -b your-branch-name origin/1.9.x 

If you're submitting a feature to addition or change, branch off of the
"master" branch


.. code-block:: python

git checkout -b your-branch-name origin/master


- Using your favorite editor, make your changes, `` committing as you go ``.
- Include tests that covers any code changes you make. Make sure the test fails without your patch. `` Run the tests <contributing-testsuite> ``.
- Push your commits to GitHub and ``create a pull request`` by using

.. code-block:: python

git push --set-upstream origin your-branch-name 


Running the tests
-----------------------

Run the basic test suite with  ``nosetests test``

This only runs the tests for the current environment. Whether this is relevant
depends on which part of openpyweb you're working on. Travis-CI will run the full
suite when you submit your pull request.

The full test suite takes a long time to run because it tests multiple
combinations of Python and dependencies. You need to have Python 2.7, 3.4,
3.5, 3.6, 3.7, 3.8 installed to run all of the environments. 


Building the docs
-----------------------

Build the docs in the ``docs`` directory using Sphinx

.. code-block:: python

cd docs
pip install -r requirements.txt
make html


Open ``build/html/index.html`` in your browser to view the docs.

Read more about ``Sphinx <https://www.sphinx-doc.org/en/master/>``.
 




Requirements 
=============

It is compulsory to create  ``requirements.txt`` file in your project root folder while developing a project. This will enable python, integrated development environment **(IDE)** editor to recognize project requirement and have them installed. You won’t have to worry about installing each dependency by yourself.


Below example shows how to list dependencies into your requirements file:

.. code-block:: python

	openpyweb==1.9.8
	openpyweb-agent == 1.0.5
	mysql-connector == 2.2.9


What it looks like:


.. code-block:: python

    |─MyopenpywebApp                            (application folder)
        |─ controller
            |─ IndexController.py
        |─ lang
            |─ en.py
        |─ model
            |─ Mymodel.py
        |─ public
            |─ Index.py
            |─ assets
            |─ uploads
            |- .htaccess
        |─ views
            |─ 404.html
            |─ homepage.html
        |- .env
        |- .htaccess
        |- requirements.txt

	




